What happens when you initialize a repository?
Why do you need to do it?

You use git init to bring in .git repo with no commits initially in it.
You need it to track development history a file that you're updating.

This is an example of something that I think I forgot to add. Something about
the difference between a repo, a WD, and the stageing area and how the stageing
area is useful for including exactly what you want in your commit.

So, I just saved without adding a commit message and the file was updated.

Now I'm adding a commit message.

This is going to add another commit with blablabla nothing important
just for funsies.

This is the third commit. Adding for this note:
1. make changes to file in atom
2. save changes
3. git add <file>
4. git commit -m "commit message"

Note: saving the changes allows you to make a new commit
Once the new commit is made, the green added lines go away.

How can you use the staging area to make sure you have one commit
per logical change?

use git diff without args to see difference between changes in WD and
what was in the staging area.
use git diff --staged to see difference between changes from WD added
to staging area and the most recent commit (or the commit checked out)

use these to tell what you have in the staging area and what you want
to put in the commit. You commit what's in the staging area to a new commit,
so you can use git add to add any files to the staging area.

I'm not sure how to remove them yet..
