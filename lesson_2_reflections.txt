What happens when you initialize a repository?
Why do you need to do it?

You use git init to bring in .git repo with no commits initially in it.
You need it to track development history a file that you're updating.

This is an example of something that I think I forgot to add. Something about
the difference between a repo, a WD, and the stageing area and how the stageing
area is useful for including exactly what you want in your commit.

So, I just saved without adding a commit message and the file was updated.

Now I'm adding a commit message.

This is going to add another commit with blablabla nothing important
just for funsies.

This is the third commit. Adding for this note:
1. make changes to file in atom
2. save changes
3. git add <file>
4. git commit -m "commit message"

Note: saving the changes allows you to make a new commit
Once the new commit is made, the green added lines go away.

How can you use the staging area to make sure you have one commit
per logical change?

use git diff without args to see difference between changes in WD and
what was in the staging area.
use git diff --staged to see difference between changes from WD added
to staging area and the most recent commit (or the commit checked out)

use these to tell what you have in the staging area and what you want
to put in the commit. You commit what's in the staging area to a new commit,
so you can use git add to add any files to the staging area.

I'm not sure how to remove them yet..

What are some situations when branches would be helpful in keeping
your history organized? How would branches help?

Branches are useful for exploring different features that you'd develop
from the master branch that you don't want to screw up the growth of the
master with weird stuff. Development, experimental branches.
The master is the production quality one.
Good for organization and collaboration with others and yourself,
compartmentalize stuff.

How do the diagrams help you visualize the branch structure?

It shows where you started working on a new experimental version
and how much each branch has grown since that split. Shows how many
different branches you have testing different things.

What is the result of merging two branches together?
Why do we represent it in the diagram the way we do?

Merge two branches brings both developed branches into one,
and you merge an offshoot into the master, so that the new commit is part of
master. The diagram wit hthe arrows shows the how each commit points to
its parents. Merging a branch into the master shows the most recent commit
of the master pointing to its two commits.

What are the pros and cons of Git's automatic merging vs. always
doing merges manually?

Git auto merging does the work for you, but when there's a merge conflict
with certain lines from different people then you have to go in and resolve
conflicts manually. Git auto merge can also increase redundancy in the code?
Merges manually take more time and you have to poke around your and other
peoples' code to resolve conflicts. 
