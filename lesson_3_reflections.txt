When would you want to use a remote repository rather than keeping all your work local?

When you want to collaborate on a project, get ideas, feedback, help.

Why might you want to always pull changes manually
rather than having Git automatically stay up-to-date
with your remote repository?

So you can specify what you want to pull and so you know what's
been pulled. If there are multiple people working on a project
it's good to know what's being loaded into your local repository.

Describe the differences between forks, clones, and branches. When would
you use one instead of another?

A fork is cloning a repository from someone else on GitHub to your
GitHub account and GitHub keeps track of these forks so original
author gets credit. A clone is copying a repository to your own account
or to your comp. Branches are a line of commits that veer off the master
to test developing experimental versions of the file.

What is the benefit of having a copy of the last known state
of the remote stored locally?

The last known state of the remote will tell you what it looked like
before new changes came in. If you want to merge something you could
reference this state before pushing to make faster merges? Like
a snapshot of commits?

How would you collaborate without using Git or GitHub?
What would be easier, and what would be harder?

I would use other forums that are similar (I don't know of any) or I'd
have to do it on an individual basis through email or somesuch.
GitHub is definitely easier because the community and infrastructure
are there.

When would you want to make changes in a separate branch rather than
directly in master? What benefits does each approach have?

You can play around with ideas without breaking master branch.
Master is cleaned up, publish ready, other branches are experiments
and messy and may or may not add/change things that you want to
have in the master. With other branches it's suggesting an idea to add
to master. Also people are more aware of basal changes happening when
changes are added to branches before merged to master because
they have to go through the steps to merge the changes, so they know
what's going on with the changes introduced into the master.
